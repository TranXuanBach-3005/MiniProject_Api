// <auto-generated />
using System;
using BachTX9_MiniProject_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BachTX9_MiniProject_API.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20220615023824_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BachTX9_MiniProject_API.Models.Answers", b =>
                {
                    b.Property<int>("AnsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnsBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsTrue")
                        .HasColumnType("int");

                    b.Property<int>("QuesId")
                        .HasColumnType("int");

                    b.HasKey("AnsId");

                    b.HasIndex("QuesId");

                    b.ToTable("answers");

                    b.HasData(
                        new
                        {
                            AnsId = 1,
                            AnsBody = "1",
                            ImgUrl = "",
                            IsTrue = 1,
                            QuesId = 1
                        },
                        new
                        {
                            AnsId = 2,
                            AnsBody = "2",
                            ImgUrl = "",
                            IsTrue = 0,
                            QuesId = 1
                        },
                        new
                        {
                            AnsId = 3,
                            AnsBody = "3",
                            ImgUrl = "",
                            IsTrue = 0,
                            QuesId = 1
                        },
                        new
                        {
                            AnsId = 4,
                            AnsBody = "4",
                            ImgUrl = "",
                            IsTrue = 1,
                            QuesId = 1
                        },
                        new
                        {
                            AnsId = 5,
                            AnsBody = "1",
                            ImgUrl = "",
                            IsTrue = 0,
                            QuesId = 2
                        },
                        new
                        {
                            AnsId = 6,
                            AnsBody = "2",
                            ImgUrl = "",
                            IsTrue = 1,
                            QuesId = 2
                        },
                        new
                        {
                            AnsId = 7,
                            AnsBody = "3",
                            ImgUrl = "",
                            IsTrue = 0,
                            QuesId = 2
                        },
                        new
                        {
                            AnsId = 8,
                            AnsBody = "4",
                            ImgUrl = "",
                            IsTrue = 1,
                            QuesId = 2
                        },
                        new
                        {
                            AnsId = 9,
                            AnsBody = "1",
                            ImgUrl = "",
                            IsTrue = 1,
                            QuesId = 3
                        },
                        new
                        {
                            AnsId = 10,
                            AnsBody = "2",
                            ImgUrl = "",
                            IsTrue = 0,
                            QuesId = 3
                        },
                        new
                        {
                            AnsId = 11,
                            AnsBody = "3",
                            ImgUrl = "",
                            IsTrue = 0,
                            QuesId = 3
                        },
                        new
                        {
                            AnsId = 12,
                            AnsBody = "4",
                            ImgUrl = "",
                            IsTrue = 1,
                            QuesId = 3
                        });
                });

            modelBuilder.Entity("BachTX9_MiniProject_API.Models.Questions", b =>
                {
                    b.Property<int>("QuesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuesBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("QuesId");

                    b.HasIndex("TestId");

                    b.ToTable("questions");

                    b.HasData(
                        new
                        {
                            QuesId = 1,
                            ImgUrl = "",
                            QuesBody = "1 + 1",
                            TestId = 1
                        },
                        new
                        {
                            QuesId = 2,
                            ImgUrl = "",
                            QuesBody = "1 + 2",
                            TestId = 2
                        },
                        new
                        {
                            QuesId = 3,
                            ImgUrl = "",
                            QuesBody = "1 + 3",
                            TestId = 3
                        });
                });

            modelBuilder.Entity("BachTX9_MiniProject_API.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Duration")
                        .HasColumnType("datetime2");

                    b.Property<int>("Scores")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestId");

                    b.ToTable("tests");

                    b.HasData(
                        new
                        {
                            TestId = 1,
                            Description = "Bai kiem tra 1",
                            Duration = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Scores = 0,
                            TestName = "Final C#"
                        },
                        new
                        {
                            TestId = 2,
                            Description = "Bai kiem tra 1",
                            Duration = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Scores = 0,
                            TestName = "Final Sql"
                        },
                        new
                        {
                            TestId = 3,
                            Description = "Bai kiem tra 1",
                            Duration = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Scores = 0,
                            TestName = "Final Web Api"
                        });
                });

            modelBuilder.Entity("BachTX9_MiniProject_API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = " n@gmail.com",
                            Password = "123456",
                            Role = 0,
                            Status = false,
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Email = " n@gmail.com",
                            Password = "123456",
                            Role = 1,
                            Status = false,
                            UserName = "teacherA"
                        },
                        new
                        {
                            UserId = 3,
                            Email = " n@gmail.com",
                            Password = "123456",
                            Role = 2,
                            Status = false,
                            UserName = "studentA"
                        });
                });

            modelBuilder.Entity("BachTX9_MiniProject_API.Models.UserTest", b =>
                {
                    b.Property<int>("UserTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("Scores")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserTestId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("userTests");

                    b.HasData(
                        new
                        {
                            UserTestId = 1,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = true,
                            Scores = 10,
                            TestId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserTestId = 2,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = true,
                            Scores = 9,
                            TestId = 2,
                            UserId = 2
                        },
                        new
                        {
                            UserTestId = 3,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = true,
                            Scores = 5,
                            TestId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("BachTX9_MiniProject_API.Models.Answers", b =>
                {
                    b.HasOne("BachTX9_MiniProject_API.Models.Questions", "Questions")
                        .WithMany("answers")
                        .HasForeignKey("QuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BachTX9_MiniProject_API.Models.Questions", b =>
                {
                    b.HasOne("BachTX9_MiniProject_API.Models.Test", "Test")
                        .WithMany("questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BachTX9_MiniProject_API.Models.UserTest", b =>
                {
                    b.HasOne("BachTX9_MiniProject_API.Models.Test", "test")
                        .WithMany("userTests")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_UserTest_Test")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BachTX9_MiniProject_API.Models.User", "user")
                        .WithMany("userTests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserTest_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
